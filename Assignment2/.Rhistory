summary(ecm)
# Estimate an AR model for first difference of income
arINC <- arima(data2$INC, order = c(4,0,0))
arINC <- coeftest(arINC)
# Forecast first differences of income based on estimated AR model
h = 2
INC <- append(rep(data2$INC[n],1), numeric(h))
for (i in 1:h){
j = i + 1
INC[j] <- arINC[5,1] + arINC[1,1]*INC[j-1]
}
# Forecast first differences of consumption based on ECM model and forecasted values of first differences of income
h = 2
CONS <- append(rep(data2$CONS[n],1), numeric(h))
Z <- append(rep(data$Z[n],2), numeric(h))
for (i in 1:h){
j = i + 1
CONS[j] <- ecm$coefficients[1,1]*Z[j-1] + ecm$coefficients[1,2] + ecm$coefficients[1,4]*INC[j]
}
# Forecast first differences of consumption based on ECM model and forecasted values of first differences of income
h = 2
CONS2 <- append(rep(data2$CONS[n],1), numeric(h))
Z <- append(rep(data$Z[n],2), numeric(h))
for (i in 1:h){
j = i + 1
CONS2[j] <- (ecm$coefficients[1,1]/(1-ecm$coefficients[1,3]))*Z[j-1] + (ecm$coefficients[1,2]/(1-ecm$coefficients[1,3])) + (ecm$coefficients[1,4]/(1-ecm$coefficients[1,3]))*INC[j]
}
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
knitr::opts_chunk$set(echo = TRUE)
library(forecast)
library(TSstudio)
library(stringr)
library(zoo)
library(ggplot2)
library(tseries)
library(stats)
library(lmtest)
library(Metrics)
library(dynlm)
library(dLagM)
library(tsoutliers)
library(DescTools)
library(naniar)
library(tseries)
library(dplyr)
library(apt)
library(tsDyn)
library(vars)
library(urca)
library(tidyverse)
# Transform data into times seires format
tsCONS <- as.numeric(ts(data$CONS, start= c(1988, 1), end = c(2012, 1), frequency = 4))
tsINC <- as.numeric(ts(data$INC, start= c(1988, 1), end = c(2012, 1), frequency = 4))
dset <- cbind(tsCONS, tsINC)
# Transform data into times seires format
tsCONS <- as.numeric(ts(data$CONS, start= c(1988, 1), end = c(2012, 1), frequency = 4))
tsINC <- as.numeric(ts(data$INC, start= c(1988, 1), end = c(2012, 1), frequency = 4))
dset <- cbind(tsCONS, tsINC)
# Transform data into times seires format
tsCONS <- as.numeric(ts(data$CONS, start= c(1988, 1), end = c(2012, 1), frequency = 4))
tsINC <- as.numeric(ts(data$INC, start= c(1988, 1), end = c(2012, 1), frequency = 4))
dset <- cbind(tsCONS, tsINC)
#Selecting the Optimal Number of Lags (Recall, this is p - 1)
lagselect <- VARselect(dset, lag.max = 7, type = "const")
lagselect$selection
lagselect$criteria
# use one lag according to SIC (2-1 = 1), and co-integration order of 1 (from previous subquestion)
# estimate error correction model
ecm <- VECM(dset, 1, r = 1, estim =("2OLS"))
summary(ecm)
forecast1 <- ts(predict(ecm, n.ahead=2)$pred, start = c(2009,2), frequency = 4)
forecast1 <- predict(ecm, n.ahead=2)
forecast1
# Estimate an AR model for first difference of income
arINC <- arima(data2$INC, order = c(4,0,0))
arINC <- coeftest(arINC)
# Forecast first differences of income based on estimated AR model
h = 2
INC <- append(rep(data2$INC[n],1), numeric(h))
for (i in 1:h){
j = i + 1
INC[j] <- arINC[5,1] + arINC[1,1]*INC[j-1]
}
# Forecast first differences of consumption based on ECM model and forecasted values of first differences of income
h = 2
CONS <- append(rep(data2$CONS[n],1), numeric(h))
Z <- append(rep(data$Z[n],2), numeric(h))
for (i in 1:h){
j = i + 1
CONS[j] <- ecm$coefficients[1,1]*Z[j-1] + ecm$coefficients[1,2] + ecm$coefficients[1,4]*INC[j]
}
# Forecast first differences of consumption based on ECM model and forecasted values of first differences of income
h = 2
CONS2 <- append(rep(data2$CONS[n],1), numeric(h))
Z <- append(rep(data$Z[n],2), numeric(h))
for (i in 1:h){
j = i + 1
CONS2[j] <- (ecm$coefficients[1,1]/(1-ecm$coefficients[1,3]))*Z[j-1] + (ecm$coefficients[1,2]/(1-ecm$coefficients[1,3])) + (ecm$coefficients[1,4]/(1-ecm$coefficients[1,3]))*INC[j]
}
forecast1 <- predict(ecm, n.ahead=2)
forecast1
tsINC
tsCONS
View(lag_struc)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
knitr::opts_chunk$set(echo = TRUE)
library(forecast)
library(TSstudio)
library(stringr)
library(zoo)
library(ggplot2)
library(tseries)
library(stats)
library(lmtest)
library(Metrics)
library(dynlm)
library(dLagM)
library(tsoutliers)
library(DescTools)
library(naniar)
library(tseries)
library(dplyr)
library(apt)
library(tsDyn)
library(vars)
library(urca)
library(tidyverse)
# Transform data into times seires format
tsCONS <- as.numeric(ts(data$CONS, start= c(1988, 1), end = c(2012, 1), frequency = 4))
tsINC <- as.numeric(ts(data$INC, start= c(1988, 1), end = c(2012, 1), frequency = 4))
dset <- cbind(tsCONS, tsINC)
#Selecting the Optimal Number of Lags (Recall, this is p - 1)
lagselect <- VARselect(dset, lag.max = 7, type = "const")
lagselect$selection
lagselect$criteria
# use one lag according to SIC (2-1 = 1), and co-integration order of 1 (from previous subquestion)
# estimate error correction model
ecm <- VECM(dset, 1, r = 1, estim =("2OLS"))
summary(ecm)
install.packages("ecm")
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
knitr::opts_chunk$set(echo = TRUE)
library(forecast)
library(TSstudio)
library(stringr)
library(zoo)
library(ggplot2)
library(tseries)
library(stats)
library(lmtest)
library(Metrics)
library(dynlm)
library(dLagM)
library(tsoutliers)
library(DescTools)
library(naniar)
library(tseries)
library(dplyr)
library(apt)
library(tsDyn)
library(vars)
library(urca)
library(tidyverse)
library(ecm)
# use one lag according to SIC (2-1 = 1), and co-integration order of 1 (from previous subquestion)
# estimate error correction model
ecm <- lm(data2$CONS ~ data$Z + data2$INC)
# ecm <- VECM(dset, 1, r = 1, estim =("2OLS"))
summary(ecm)
View(data2)
#Selecting the Optimal Number of Lags (Recall, this is p - 1)
lagselect <- VARselect(data$CONS, lag.max = 7, type = "const")
lagselect$selection
lagselect$criteria
#Selecting the Optimal Number of Lags (Recall, this is p - 1)
lagselect <- VARselect(data2$CONS, lag.max = 7, type = "const")
#Selecting the Optimal Number of Lags (Recall, this is p - 1)
data2 <- is.na(data2)
lagselect <- VARselect(data2$CONS, lag.max = 7, type = "const")
View(data2)
#Selecting the Optimal Number of Lags (Recall, this is p - 1)
data2 <- !is.na(data2)
lagselect <- VARselect(data2$CONS, lag.max = 7, type = "const")
View(data2)
#Selecting the Optimal Number of Lags (Recall, this is p - 1)
data2 <- data2[!is.na(data2)]
lagselect <- VARselect(data2$CONS, lag.max = 7, type = "const")
#Selecting the Optimal Number of Lags (Recall, this is p - 1)
data2 <- na-omit(data2)
# Load data
data <- read.csv("data_assign_p4.csv")
#Selecting the Optimal Number of Lags (Recall, this is p - 1)
data2 <- na.omit(data2)
lagselect <- VARselect(data2$CONS, lag.max = 7, type = "const")
# Calculate first differences of income and consumption data
data2 <- data %>%
mutate_at(vars(INC:CONS), list(~ .x - lag(.x)))
View(data)
View(data2)
# Regress Consumption on Income to get get estimated regression coefficients
test <- lm(data$CONS ~ data$INC)
lambda <- test$coefficients[2]
delta <- test$coefficients[1]
lambda
delta
# Calculate regression residuals
data$Z <- data$CONS - delta - lambda*data$INC
View(data)
# Add also to data2
data2$Z <- data$Z
View(data2)
# use one lag according to SIC (2-1 = 1), and co-integration order of 1 (from previous subquestion)
# estimate error correction model
ecm <- dynlm(data2$CONS ~ L(data$Z,1) + L(data2$INC, 5))
# ecm <- VECM(dset, 1, r = 1, estim =("2OLS"))
summary(ecm)
# use one lag according to SIC (2-1 = 1), and co-integration order of 1 (from previous subquestion)
# estimate error correction model
ecm <- dynlm(data2$CONS ~ L(data$Z,1:1) + L(data2$INC, 1:5))
# use one lag according to SIC (2-1 = 1), and co-integration order of 1 (from previous subquestion)
# estimate error correction model
ecm <- dynlm(data2$CONS ~ L(data$Z, 1) + L(data2$INC, c(1:5)))
# use one lag according to SIC (2-1 = 1), and co-integration order of 1 (from previous subquestion)
# estimate error correction model
ecm <- dynlm(data2$CONS ~ L(data$Z, 1) + L(data2$INC, 1:5))
# use one lag according to SIC (2-1 = 1), and co-integration order of 1 (from previous subquestion)
# estimate error correction model
ecm <- dynlm(data2$CONS ~ L(data$Z, 1) + L(data2$INC, 1:4))
# use one lag according to SIC (2-1 = 1), and co-integration order of 1 (from previous subquestion)
# estimate error correction model
ecm <- dynlm(data2$CONS ~ L(data$Z, 1) + L(data2$INC, 0:4))
# use one lag according to SIC (2-1 = 1), and co-integration order of 1 (from previous subquestion)
# estimate error correction model
ecm <- dynlm(data2$CONS ~ L(data$Z, 1) + L(data2$INC, 0:1))
# use one lag according to SIC (2-1 = 1), and co-integration order of 1 (from previous subquestion)
# estimate error correction model
ecm <- dynlm(data2$CONS ~ L(data$Z, 1) + L(data2$INC, 1:2))
# use one lag according to SIC (2-1 = 1), and co-integration order of 1 (from previous subquestion)
# estimate error correction model
ecm <- dynlm(data2$CONS ~ L(data$Z, 1) + L(data2$INC, 1:4))
# use one lag according to SIC (2-1 = 1), and co-integration order of 1 (from previous subquestion)
# estimate error correction model
ecm <- dynlm(data2$CONS ~ L(data$Z, 1) + data2$INC + L(data2$INC, 1))
# ecm <- VECM(dset, 1, r = 1, estim =("2OLS"))
summary(ecm)
# use one lag according to SIC (2-1 = 1), and co-integration order of 1 (from previous subquestion)
# estimate error correction model
ecm <- dynlm(data2$CONS ~ L(data2$Z, 1) + data2$INC + L(data2$INC, 1))
# ecm <- VECM(dset, 1, r = 1, estim =("2OLS"))
summary(ecm)
# use one lag according to SIC (2-1 = 1), and co-integration order of 1 (from previous subquestion)
# estimate error correction model
data2 <- na.omit(data2)
# use one lag according to SIC (2-1 = 1), and co-integration order of 1 (from previous subquestion)
# estimate error correction model
# data2 <- na.omit(data2)
ecm <- dynlm(data2$CONS ~ L(data2$Z, 1) + data2$INC + L(data2$INC, 1))
# ecm <- VECM(dset, 1, r = 1, estim =("2OLS"))
summary(ecm)
# use one lag according to SIC (2-1 = 1), and co-integration order of 1 (from previous subquestion)
# estimate error correction model
# data2 <- na.omit(data2)
ecm <- dynlm(data2$CONS ~ L(data2$Z, 1) + data2$INC + L(data2$INC, 2))
# ecm <- VECM(dset, 1, r = 1, estim =("2OLS"))
summary(ecm)
# use one lag according to SIC (2-1 = 1), and co-integration order of 1 (from previous subquestion)
# estimate error correction model
# data2 <- na.omit(data2)
ecm <- dynlm(data2$CONS ~ L(data2$Z, 1) + data2$INC + L(data2$INC, 3))
# ecm <- VECM(dset, 1, r = 1, estim =("2OLS"))
summary(ecm)
# use one lag according to SIC (2-1 = 1), and co-integration order of 1 (from previous subquestion)
# estimate error correction model
# data2 <- na.omit(data2)
ecm <- dynlm(data2$CONS ~ data2$Z + data2$INC + L(data2$INC, 3))
# ecm <- VECM(dset, 1, r = 1, estim =("2OLS"))
summary(ecm)
# use one lag according to SIC (2-1 = 1), and co-integration order of 1 (from previous subquestion)
# estimate error correction model
# data2 <- na.omit(data2)
ecm <- dynlm(data2$CONS ~ L(data2$Z,1 + data2$INC + L(data2$INC, 3))
# ecm <- VECM(dset, 1, r = 1, estim =("2OLS"))
summary(ecm)
# use one lag according to SIC (2-1 = 1), and co-integration order of 1 (from previous subquestion)
# estimate error correction model
# data2 <- na.omit(data2)
ecm <- dynlm(data2$CONS ~ L(data2$Z,1) + data2$INC + L(data2$INC, 3))
# ecm <- VECM(dset, 1, r = 1, estim =("2OLS"))
summary(ecm)
# use one lag according to SIC (2-1 = 1), and co-integration order of 1 (from previous subquestion)
# estimate error correction model
# data2 <- na.omit(data2)
ecm <- dynlm(data2$CONS ~ L(data2$Z,1) + L(data2$INC, 0))
# ecm <- VECM(dset, 1, r = 1, estim =("2OLS"))
summary(ecm)
# use one lag according to SIC (2-1 = 1), and co-integration order of 1 (from previous subquestion)
# estimate error correction model
# data2 <- na.omit(data2)
ecm <- dynlm(data2$CONS ~ L(data2$Z,1) + L(data2$INC, 0:5))
# use one lag according to SIC (2-1 = 1), and co-integration order of 1 (from previous subquestion)
# estimate error correction model
# data2 <- na.omit(data2)
ecm <- dynlm(data2$CONS ~ L(data2$Z,1) + L(data2$INC, 0:1))
# use one lag according to SIC (2-1 = 1), and co-integration order of 1 (from previous subquestion)
# estimate error correction model
# data2 <- na.omit(data2)
ecm <- dynlm(diff(data$CONS) ~ L(data$Z,1) + L(diff(data$INC), 0:1))
diff(data$CONS)
# use one lag according to SIC (2-1 = 1), and co-integration order of 1 (from previous subquestion)
# estimate error correction model
# data2 <- na.omit(data2)
ecm <- lm(diff(data$CONS) ~ L(data$Z,1) + L(diff(data$INC), 0:1))
# use one lag according to SIC (2-1 = 1), and co-integration order of 1 (from previous subquestion)
# estimate error correction model
# data2 <- na.omit(data2)
ecm <- lm(data2$CONS ~ data2$Z*lag(data2$CONS, -1) + data2$INC + data2$INC*lag(data2$CONS, -1))
# Transform data into times seires format
tsCONS <- ts(data$CONS, start= c(1988, 1), end = c(2012, 1), frequency = 4)
tsINC <- ts(data$INC, start= c(1988, 1), end = c(2012, 1), frequency = 4)
tsZ <- ts(data$Z, start= c(1988, 1), end = c(2012, 1), frequency = 4)
# use one lag according to SIC (2-1 = 1), and co-integration order of 1 (from previous subquestion)
# estimate error correction model
# data2 <- na.omit(data2)
ecm <- dynlm(diff(tsCONS) ~ L(tsZ, 1) + L(tsINC, 0:4))
# ecm <- VECM(dset, 1, r = 1, estim =("2OLS"))
summary(ecm)
# use one lag according to SIC (2-1 = 1), and co-integration order of 1 (from previous subquestion)
# estimate error correction model
# data2 <- na.omit(data2)
ecm <- dynlm(diff(tsCONS) ~ L(tsZ, 1) + L(tsINC, 0:4) + L(tsCONS, 0:4))
# ecm <- VECM(dset, 1, r = 1, estim =("2OLS"))
summary(ecm)
ecm <- dynlm(diff(tsCONS) ~ L(tsZ, 1) + L(tsINC, 0:3) + L(tsCONS, c(0, 2:3)))
# ecm <- VECM(dset, 1, r = 1, estim =("2OLS"))
summary(ecm)
ecm <- dynlm(diff(tsCONS) ~ L(tsZ, 1) + L(tsINC, 0:2) + L(tsCONS, c(0, 2)))
# ecm <- VECM(dset, 1, r = 1, estim =("2OLS"))
summary(ecm)
ecm <- dynlm(diff(tsCONS) ~ L(tsZ, 1) + L(tsINC, 0:1) + L(tsCONS, 0))
# ecm <- VECM(dset, 1, r = 1, estim =("2OLS"))
summary(ecm)
ecm <- dynlm(diff(tsCONS) ~ L(tsZ, 1) + L(tsINC, 1) + L(tsCONS, 0))
# ecm <- VECM(dset, 1, r = 1, estim =("2OLS"))
summary(ecm)
# use one lag according to SIC (2-1 = 1), and co-integration order of 1 (from previous subquestion)
# estimate error correction model
# data2 <- na.omit(data2)
ecm <- dynlm(diff(tsCONS) ~ L(tsZ, 1) + L(diff(tsINC), 0:4) + L(diff(tsCONS), 0:4))
# ecm <- VECM(dset, 1, r = 1, estim =("2OLS"))
summary(ecm)
# drio first lag of CONS blabla collinearity
ecm <- dynlm(diff(tsCONS) ~ L(tsZ, 1) + L(diff(tsINC), 0:3) + L(diff(tsCONS), 0:3))
# ecm <- VECM(dset, 1, r = 1, estim =("2OLS"))
summary(ecm)
ecm <- dynlm(diff(tsCONS) ~ L(tsZ, 1) + L(diff(tsINC), 0:2) + L(diff(tsCONS), 0:2))
# ecm <- VECM(dset, 1, r = 1, estim =("2OLS"))
summary(ecm)
ecm <- dynlm(diff(tsCONS) ~ L(tsZ, 1) + L(diff(tsINC), 0:1) + L(diff(tsCONS), 0:1))
# ecm <- VECM(dset, 1, r = 1, estim =("2OLS"))
summary(ecm)
ecm <- dynlm(diff(tsCONS) ~ L(tsZ, 1) +L(diff(tsINC), 0) + L(diff(tsCONS), 0))
# ecm <- VECM(dset, 1, r = 1, estim =("2OLS"))
summary(ecm)
# use one lag according to SIC (2-1 = 1), and co-integration order of 1 (from previous subquestion)
# estimate error correction model
# data2 <- na.omit(data2)
ecm <- dynlm(diff(tsCONS) ~ L(tsZ, 1) + L(diff(tsINC), 0:4) + L(diff(tsCONS), 1:4))
# ecm <- VECM(dset, 1, r = 1, estim =("2OLS"))
summary(ecm)
# drio first lag of CONS blabla collinearity
ecm <- dynlm(diff(tsCONS) ~ L(tsZ, 1) + L(diff(tsINC), 0:3) + L(diff(tsCONS), 1:3))
# ecm <- VECM(dset, 1, r = 1, estim =("2OLS"))
summary(ecm)
ecm <- dynlm(diff(tsCONS) ~ L(tsZ, 1) + L(diff(tsINC), 0:2) + L(diff(tsCONS), 1:3))
# ecm <- VECM(dset, 1, r = 1, estim =("2OLS"))
summary(ecm)
ecm <- dynlm(diff(tsCONS) ~ L(tsZ, 1) + L(diff(tsINC), 0:1) + L(diff(tsCONS), c(1,3)))
# ecm <- VECM(dset, 1, r = 1, estim =("2OLS"))
summary(ecm)
ecm <- dynlm(diff(tsCONS) ~ L(tsZ, 1) +L(diff(tsINC), 0) + L(diff(tsCONS), c(1,3)))
# ecm <- VECM(dset, 1, r = 1, estim =("2OLS"))
summary(ecm)
ecm <- dynlm(diff(tsCONS) ~ L(tsZ, 1) +L(diff(tsINC), 0) + L(diff(tsCONS), 3))
# ecm <- VECM(dset, 1, r = 1, estim =("2OLS"))
summary(ecm)
# Estimate all models and pick specification with lowest AIC - INC
ts <- data$INC
sics <- rep(0, (comb-1))
for (i in 1:(comb-1)){ # there is an issue with (1,1,1,1,1,1,)
logl <- arima(x=ts, order = c(max_lag -1,0,0), fixed = lag_struc[i,], method ="CSS")$loglik
k = sum(is.na(lag_struc[i,]))
sics[i] = k*log(length(ts)) - 2*logl
}
min(sics)
arima(x=ts, order = c(max_lag -1,0,0), fixed = lag_struc[which.min(sics),], method ="CSS")
# Perform ADF Test
ts <- ts(ts)
struc <- c(0)
for (i in 1:length(lag_struc[which.min(sics),]-1)){
if (is.na(lag_struc[which.min(sics),i])){
struc <- cbind(struc, i)
}
}
struc <- as.numeric(struc[,-1])
struc <- head(struc,-1)
if(is.na(lag_struc[which.min(sics),i])){
int = TRUE
mod <- dynlm(diff(ts) ~ L(ts,1) + L(diff(ts),struc))
} else{
int = FALSE
mod <- dynlm(diff(ts) ~ L(ts,1) + L(diff(ts),struc)-1)
}
beta = summary(mod)$coefficients[1,1]
se = summary(mod)$coefficients[1,2]
adf = beta/se
adf
if(int==TRUE){
adf< (-1.616)
}else{
adf< (-2.568)
}
# Estimate all models and pick specification with lowest AIC - INC
ts <- data2$INC
sics <- rep(0, comb)
for (i in 1:comb){
logl <- arima(x=ts, order = c(max_lag -1,0,0), fixed = lag_struc[i,], method ="CSS")$loglik
k = sum(is.na(lag_struc[i,]))
sics[i] = k*log(length(ts)) - 2*logl
}
min(sics)
arima(x=ts, order = c(max_lag -1,0,0), fixed = lag_struc[which.min(sics),], method ="CSS")
# Perform ADF Test
ts <- ts(ts)
struc <- c(0)
for (i in 1:length(lag_struc[which.min(sics),]-1)){
if (is.na(lag_struc[which.min(sics),i])){
struc <- cbind(struc, i)
}
}
struc <- as.numeric(struc[,-1])
struc <- head(struc,-1)
if(is.na(lag_struc[which.min(sics),i])){
int = TRUE
mod <- dynlm(diff(ts) ~ L(ts,1) + L(diff(ts),struc))
} else{
int = FALSE
mod <- dynlm(diff(ts) ~ L(ts,1) + L(diff(ts),struc)-1)
}
beta = summary(mod)$coefficients[1,1]
se = summary(mod)$coefficients[1,2]
adf = beta/se
adf
if(int==TRUE){
adf< (-1.616)
}else{
adf< (-2.568)
}
INCfc <- arima(x=ts, order = c(max_lag -1,0,0), fixed = lag_struc[which.min(sics),], method ="CSS") # for 4.8
INCfc
INCfc$coef[1,6]
INCfc$coef[1,5]
INCfc$coef[6]
# Forecast first differences of income based on estimated AR model
h = 2
INC <- append(rep(data2$INC[n],1), numeric(h))
for (i in 1:h){
j = i + 1
INC[j] <- INCfc$coef[6] + INCfc$coef[1]*INC[j-1]
}
INC <- append(rep(data2$INC[n],1), numeric(h))
# Forecast first differences of income based on estimated AR model
n = length(data2)
INC <- append(rep(data2$INC[n],1), numeric(h))
# Forecast first differences of income based on estimated AR model
n = length(data2$CONS)
INC <- append(rep(data2$INC[n],1), numeric(h))
data2$CONS[86]
ecm$coefficients
i = 87
pred_delta <- ecm$coefficients[1] + ecm$coefficients[2]*data2$Z[i-1] +  ecm$coefficients[3]*data2$INC[i] + ecm$coefficients[4]*data2$CONS[i-3]
i = 87
pred_delta <- ecm$coefficients[1] + ecm$coefficients[2]*data2$Z[i-1] +  ecm$coefficients[3]*data2$INC[i] + ecm$coefficients[4]*data2$CONS[i-3]
pred_delta
as.numeric(pred_delta)
i = 87
pred_delta_cor <- ecm$coefficients[2]*data2$Z[i-1]
as.numeric(pred_delta_cor)
i = 87
pred_delta_sr <- ecm$coefficients[1] + ecm$coefficients[3]*data2$INC[i] + ecm$coefficients[4]*data2$CONS[i-3]
as.numeric(pred_delta_sr)
pred <- data$CONS[i-2] + pred_delta
pred
pred <- data$CONS[i-2] + pred_delta
as.numeric(pred)
data2$CONS[87]
data2$CONS[86]
i = 86
pred_delta_sr <- ecm$coefficients[1] + ecm$coefficients[3]*data2$INC[i] + ecm$coefficients[4]*data2$CONS[i-3]
as.numeric(pred_delta_sr)
i = 86
pred_delta <- ecm$coefficients[1] + ecm$coefficients[2]*data2$Z[i-1] +  ecm$coefficients[3]*data2$INC[i] + ecm$coefficients[4]*data2$CONS[i-3]
as.numeric(pred_delta)
i = 86
pred_delta_lr <- ecm$coefficients[2]*data2$Z[i-1]
as.numeric(pred_delta_lr)
i = 86
pred_delta_sr <- ecm$coefficients[1] + ecm$coefficients[3]*data2$INC[i] + ecm$coefficients[4]*data2$CONS[i-3]
as.numeric(pred_delta_sr)
data$CONS[86]
j=86
pred <- data$CONS[j] + pred_delta
as.numeric(pred)
